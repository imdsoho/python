# 네임스페이스란 변수나 함수명 등의 '이름'과 이들이 가리키는 '객체'의 대응 관계를 말한다.
# 이 변수가 소스 코드상에서 참조될 수 있는 범위를 유효 범위라고 한다.
# 파이썬에서 네임스페이스는 보통 딕셔너리 타입으로 구현된다.
# 네임스페이스는 사용자가 직접 만드는 것이 아니라 프로그램이 필요로 할 때 자동적으로 생성되며 필요하지 않게 되면 파기된다.

# 모듈을 import 할 때 해당 모듈의 네임스페이스가 생성된다.
# 이를 이 모듈의 전역 네임스페이스(global namespace)라고 한다.
# 함수 호출시에도 네임스페이스를 생성한다. 함수가 종료되면 네임스페이스는 삭제된다.
# 함수 네임스페이스는 지역 네임스페이스(local namespace)이다.

# 내장 함수 등에 대한 이름을 포함하고 있는 네임스페이스로 내장 네임스페이스(built-in namespace)가 항상 존재한다.

# 유효범위란 어떤 객체를 직접 참조할 수 있는 범위를 말한다.
# '직접'의 의미는 import한 모듈명을 붙여 'numpy.pi'와 같은 식으로 접근하는 것이 아니라
# 'pi'처럼 변수명만 써서 이름을 지정하는 것이다.

# 1. 지역 변수를 가지며 현재 실행하는 코드가 있는 함수 등의 유효 범위
# 2. 바깥쪽 함수의 유효 범위, 가까운 것부터 순서대로 검색되며, 지역 변수도 전역 변수도 아닌 변수를 갖는다.
# 3. 전역 변수를 갖는 모듈의 유효 범위
# 4. 내장 요소의 이름을 갖는 가장 바깥쪽 유효 범위

# 함수 안에서 어떤 변수가 나타났을 때 이 변수는
# 해당 함수의 지역 네임스페이스 - [1]
# 조금 더 바깥쪽의 유효 범위 - [2]
# 모듈의 전역 네임스페이스 - [3]
# 내장 요소의 네임스페이스 - [4]
# 순서로 찾아간다.

a,b = 3, 7
def foo():
    global a # a는 전역 네임스페이스 상의 a를 가리킨다.
    a = 5
    print('(a,b) = (%d, %d)' % (a, b))
foo()
print(a)

# 지역 네임스페이스에 없는 변수는 전역 네임스페이스로부터 참조할 수 있지만,
# 전역 네임스페이스에 있는 변수의 데이터를 변경할 수 없다.

# [참조] - https://github.com/imdsoho/python/blob/master/decorator_closure/closure.py
def countdown(init_n):
    n = init_n

    def minusone():
        nonlocal n  # 부모 함수에서 정의된 n을 사용한다. (python 3.x)
                    # global과 비슷하지만, global문에서는 전역 네임스페이스부터 검색
        n -= 1

    while n > 0:
        print(n)
        minusone()

countdown(3)


# [참조][책] 엔지니어를 위한 파이썬